spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapCountryData(spdf, nameColumnToPlot="count", catMethod="fixedWidth", mapTitle = "Number of Movies")
mapCountryData(spdf, nameColumnToPlot="count", catMethod=c(0,1,3,5,10,50,100,300,500,2500), mapTitle = "Number of Movies")
mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,2500),
mapTitle = "Number of Movies added to Netflix")
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5 ))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.8))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5,legendIntervals="data",legendMar = 2))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5,legendMar = 2))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendIntervals="data",legendMar = 2))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
labelCountries()
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
labelCountries()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
df <- read.csv("netflix_titles.csv", stringsAsFactors = F)
summary(df)
length(df$release_year)
length(unique(df[,"director"])) # 4050
sapply(df, function(x) sum(is.na(x) | x == 0 | x == ""))
sapply(df, function(x) sum(is.na(x))) # no NA
sapply(df, function(x) sum(x == 0)) # no 0 values
sapply(df, function(x) sum(x == ""))
# convert date to year from date_added column
df$date_added <- sub(".*(\\d+{4}).*$", "\\1", df$date_added)
# number of movies and TV shows added to Netflix by year
year <- df %>%
filter(!(date_added == "")) %>%
group_by(date_added) %>%
summarise(count = n())
bar <- ggplot(year, aes(x = date_added, y = count, fill = date_added)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3)
bar
# Netflix trends - movie vs TV shows
group <- df %>%
filter(!(date_added == "")) %>%
group_by(type, date_added) %>%
summarise(count = n())
bar <- ggplot(group, aes(x = date_added, y = count, fill = type)) +
geom_bar(stat = "identity", position = "dodge")
bar
type <- df %>%
group_by(type) %>%
summarise(count = n())
#all plots created afterwards will have title at center
#theme_update(plot.title = element_text(hjust = 0.5))
bar <- ggplot(type, aes(x = type, y = count, fill = type)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
labs(title = "Netflix contents by type") +
theme(plot.title = element_text(hjust = 0.5)) # center title
bar
movie <- df[(df$type == "Movie"),]
tv <- df[(df$type == "TV Show"),]
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
country_map <- ggplot(movie_country, aes(text = paste0("country: ", country))) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = count),
color = "white",
size = .1
) +
coord_map(xlim = c(-175, -45), ylim = c(-10, 80))
country_map
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
library(rworldmap)
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix")
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rworldmap)
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
capture.output( 'the whole function' , file='NUL' )
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
View(df)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rworldmap)
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
map <- do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
map
#labelCountries()
install.packages("plotly")
library(plotly)
ggplotly(map)
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
map <- do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
library(plotly)
ggplotly(map)
#labelCountries()
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
bar <- ggplot(movie_country, aes(x=reorder(country,-value), y = value, fill = country)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- ggplot(movie_country, aes(x=reorder(country,-value), y = count, fill = country)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- ggplot(movie_country, aes(x=reorder(country,-value), y = count, fill = country)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- ggplot(movie_country, aes(x=reorder(country,-count), y = count, fill = country)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- ggplot(movie_country, aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
movie_country$country[5,]
movie_country[5,]
View(movie_country)
bar <- ggplot(movie_country, aes(x=reorder(head(country,5),-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
movie_country$country[5]
movie_country$country[1:5]
View(movie_country)
bar <- ggplot(movie_country, aes(x=reorder(country[1:10],-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- movie_country %>%
arrange(desc(freq))
bar <- movie_country %>%
arrange(desc(freq))
bar <- movie_country %>%
arrange(desc())
bar <- movie_country %>%
arrange(desc(count))
View(bar)
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10)
bar <- movie_country %>%
arrange(desc(count))
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(movie_country, aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(movie_country, aes(x=country, y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(., aes(x=country, y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(., aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
# top 10 countries by number of movies added to Netflix
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(., aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic()
bar
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(., aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic() +
labs(x = "Country")
bar
# movie
unique(movie$country) # some movies/TV shows has listed several countries as contributors/origin
head(movie$country, 50)
# split comma separated country names
a <- unlist(strsplit(movie$country, ", "))
unique(a)
# remove comma
a <- gsub(",","", a)
unique(a)
# store the list as data frame
movie_country <- data.frame(country = a)
unique(movie_country$country)
movie_country <- movie_country %>%
group_by(country) %>%
summarise(count = n())
# top 10 countries by number of movies added to Netflix
bar <- movie_country %>%
arrange(desc(count)) %>%
slice(1:10) %>%
ggplot(., aes(x=reorder(country,-count), y = count)) +
geom_bar(stat='identity') +
theme_classic() +
labs(x = "Country")
bar
# world map
spdf <- joinCountryData2Map(movie_country, joinCode="NAME", nameJoinColumn="country")
mapParams <- mapCountryData(spdf,
nameColumnToPlot="count",
catMethod=c(0,1,3,5,10,50,100,300,500,1000,2500),
mapTitle = "Number of Movies added to Netflix",
addLegend = FALSE)
do.call(addMapLegend, c(mapParams, legendLabels="all", legendWidth=0.5))
#labelCountries()
